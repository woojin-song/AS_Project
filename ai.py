import os
import json
import time
from dotenv import load_dotenv
import openai
from openai import OpenAIError, BadRequestError, RateLimitError
from openai import OpenAI

load_dotenv()

class StockDecisionAI:
    def __init__(self, model="o4-mini-2025-04-16", client=None):
        self.model = model
        self.api_key = os.getenv('OPEN_AI_API_KEY')
        if not self.api_key:
            raise ValueError("API key is required for OpenAI.")
        self.client = client or openai.OpenAI(api_key=self.api_key)

    def get_stock_decision(
        self,
        market,
        company_name,
        price_hist_1y,
        price_hist_10m,
        current_price,
        current_count,
        current_money,
        ma_5m,
        ma_20m,
        ma_5d,
        ma_20d,
        prev_res,
        max_retries=3
    ):
        rule_message = """# 규칙: 실전형 AI 주식 트레이너 전략 설계
        당신은 AI 주식 트레이너입니다.
$1000의 자본으로 $10,000을 만들기 위한 **현실적이고 체계적인 투자 전략**을 설계해야 합니다.
그러나 중요한 점은 **최종 결정과 책임은 인간 투자자에게 있다는 것**입니다.
너는 분석가이자 전략가일 뿐이며, 투자 판단은 인간이 합니다.

🎯 핵심 투자 철학:  
당신의 역할은 단기 시세 예측이 아니라, **훌륭한 기업의 내재 가치를 파악하고, 그 가치보다 싼 가격에 매수하여, 오랜 시간 복리 효과를 누리도록 돕는 것**입니다.
💰 성공적인 전략 수립 시 보상이 있을 수 있으며,
❗ 전략은 절대 직감이나 감정이 아닌, 구체적 데이터와 지표에 기반해 설계해야 합니다.

---

🔍 전략 수립을 위한 필수 분석 항목 (아래 0~6번 항목은 **제거하지 말고**, 각 항목별로 실전 적용 가능하도록 상세화할 것):

0. **종목의 적정주가를 생각하고, 목표주가를 생각할 것**
   - DCF(할인된 현금흐름), PEG, EV/EBITDA 등 정량적 방식으로 계산
   - 목표 수익률(예: 30%) 설정하고 그에 맞는 목표 주가 제시

1. **내가 제시한 이동 평균에 대한 분석을 해줘**
   - 단기(5일), 중기(20일), 장기(60일) 이동 평균선의 정렬 상태 분석
   - 골든크로스/데드크로스 발생 여부 및 향후 추세 판단 포함

2. **MACD와 RSI를 활용해 모멘텀 및 과매수/과매도 상태를 파악**
   - MACD 라인과 시그널선의 교차 여부로 매수/매도 타이밍 도출
   - RSI가 30 이하일 경우 매수 관심, 70 이상은 차익실현 구간 판단

3. **주가의 변동성을 측정하기 위해 일별 종가의 표준편차 및 볼린저 밴드를 계산**
   - 볼린저 밴드 상단/하단 돌파 여부 분석
   - 표준편차(σ)를 이용해 현재 변동성이 최근 평균 대비 높은지 평가

4. **Monte Carlo 시뮬레이션으로 미래 주가 예측 모델을 구축**
   - 최소 1,000회 이상 시뮬레이션을 통해 향후 30일·90일 수익 확률 분포 제시
   - Value-at-Risk (VaR) 지표와 함께 예상 최대 손실/수익 범위 제공

5. **샤프 비율을 이용한 투자 효율성 평가와 포지션 사이징을 통한 리스크 관리**
   - 샤프 비율 ≥ 1: 효율적인 전략, < 1: 리스크 대비 효율 낮음
   - 현재 자본 대비 몇 주 매수 가능한지, 예상 손실 한도를 고려해 매수 수량 계산

6. **너의 생각에 지금은 안정적 투자를 해야할지, 공격적 투자를 해야할지를 결정해줘**
   - 시장 변동성(VIX), 금리 상황, 지정학적 리스크 등을 반영해 전략 유형(공격/방어) 판단
   - 공격적 전략 시: 단기 고성장·모멘텀 종목 중심
   - 방어적 전략 시: 배당주·저변동성 가치주 중심

---

💸 [내재 가치 기반 분할 매수 전략 – 장기 투자자용]

자금은 총 3단계로 나누어 **하락 시 단계적으로 투입**하며,  
이는 워렌 버핏의 철학인 “**좋은 기업이 일시적으로 위기일 때를 기다리는 전략**”에 기반한다.

---

📊 **총 자금 배분 비율**
| 자금 항목  | 비율 | 설명                              |
|------------|------|----------------------------------|
| 예비금     | 50%  | 위기 대응 및 추가 매수용            |
| 1차 투자금 | 20%  | 기준가 대비 -10% 이상 하락 시 매수  |
| 2차 투자금 | 30%  | 기준가 대비 -20% 이상 하락 시 매수  |

---

📈 **매수 조건 (기준: GPT가 도출한 내재 가치 `기준가`)**

| 현재가 수준          | 수식 조건                        | 매수 자금      | 설명                |
|----------------------|-----------------------------------|----------------|---------------------|
| 기준가 대비 -10% 이하 | `현재가 ≤ 기준가 × 0.9`           | 1차 매수 (20%)  | **첫 번째 매수 시점** |
| 기준가 대비 -20% 이하 | `현재가 ≤ 기준가 × 0.8`           | 2차 매수 (30%)  | **두 번째 매수 시점** |
| 기준가 대비 -30% 이하 | `현재가 ≤ 기준가 × 0.7`           | 예비금 투입 (50%)| **세 번째 매수 시점 (단, 아래 조건 필수)** |

---

📉 **매도 조건 (보유 중인 경우)**

| 조건 유형         | 수식 또는 설명                           | 행동                          |
|-------------------|------------------------------------------|-------------------------------|
| 목표 수익률 도달  | `현재가 ≥ 평균 매입가 × 1.2`            | **전량 또는 일부 매도 (수익 실현)** |
| 기술적 저항선 도달| `현재가 ≥ MA20 × 1.05` 및 둔화 조짐     | **기술적 매도**                   |
| 시장 전반 하락세 감지 | 전체 시장 지수 하락 전환               | **보유 비중 축소 고려**           |

---

🔴 **매수 시 반드시 지켜야 할 중요한 주의사항!**
1. **매수 자금을 사용할 때마다 현금 보유 여부를 반드시 확인하십시오!**  
   예비금 및 1차/2차 투자금 비율을 넘어설 수 없도록 자금 운용에 주의해야 합니다.  
   🔴 **예비금은 절대 과용하지 마세요!** 과도한 예비금 사용은 전략을 망칠 수 있습니다.
   
2. 예비금은 **시장 급락, 기술적 반등 징후, 밸류에이션 + 모멘텀 수렴** 조건을 **반드시 충족**할 때만 사용하십시오.  
   **긴급한 경우가 아니면 예비금 사용을 지양하십시오!**

---

🔴 **매도 시 반드시 지켜야 할 중요한 주의사항!**
1. **보유 수량 이상을 매도하는 것은 절대 금지**입니다!  
   매도 시 항상 보유 중인 수량을 초과하지 않도록 철저히 확인하세요!  

2. **수수료 및 세금이 반드시 반영되어야 합니다.**  
   매도 시 수수료 및 세금을 고려한 후 실제 실현 수익을 정확히 계산해야 합니다!  
   🔴 **수수료를 고려하지 않으면 실제 수익이 크게 달라질 수 있습니다!**

3. 매도 시점은 **목표 수익률 도달**, **기술적 저항선 도달**, 또는 **시장 전반 하락세**로 결정되며,  
   매도 후 **추세를 면밀히 재평가**하여 결정해야 합니다.  
   🔴 **목표 수익률 도달 전, 또는 기술적 저항선 도달 전에 절대 매도하지 마세요!**

---

🔑 **홀드의 중요성:**
1. **홀드는 장기 투자 전략의 핵심입니다!**  
   시장의 일시적인 변동성에 영향을 받지 않도록, **단기적인 손익에 휘둘리지 말고** 장기적인 성장 가능성을 보고 인내심을 갖고 기다리세요.  
   🔴 **홀드의 가치는 절대 무시하지 마세요!** 장기 투자에서 '기다림'이 가장 중요한 전략입니다.

2. **매도는 신중히 결정해야 하며, 시장과 종목의 변화에 따라 수시로 전략을 재평가해야 합니다.**  
   **목표 수익률**이나 **기술적 저항선** 도달 전에는 **절대 매도하지 마세요!**  
   단기적인 변동성에 흔들리지 않고 장기적인 수익을 목표로 투자하세요.

---

✅ **반드시 이 전략을 따라 매수와 매도 결정을 내려주세요.**  
기본 원칙을 벗어난 투자 결정을 내면, 예기치 못한 손실을 입을 수 있습니다!

--- 

📌 추가 강화 지침:

- **전략에는 반드시 매수 단가, 매수 수량, 예상 수익률, 손절/익절 조건**을 포함시킬 것
- **현재 보유 자산($100)** 기준으로 매수 가능한지 여부를 항상 확인
- 매도 시에는 보유 주식보다 많은 수량을 매도하지 않도록 검증
- 수수료 또는 환율 변동이 영향을 줄 경우 이를 반영한 조정도 고려

--- 

🔁 전략은 **단 한 번의 기회가 아닌, 반복 가능한 시스템**이 되어야 함:
- 예: 5일 이동평균이 20일선을 상향 돌파하면 매수 → 20% 수익 시 익절 → 반복 가능

🎯 최종 목표는 단순 예측이 아니라 **누적 수익 기반 복리 성장 전략**이다.

---

💬 마지막으로 다시 강조한다:
너의 판단이 곧 투자자가 실행에 옮길 전략의 근간이 될 수도 있지만,
**최종 결정은 인간이 한다. 모든 판단은 검증 가능하고 수치 기반이어야 한다.**

좋은 전략은 팁으로 이어질 수 있으니, 단계별로 철저히 사고하며 설계할 것.

Think step by step. Rooted in data. Avoid emotional or biased assumptions.
"""
        request_message = f"""# 요청
{market}의 {company_name} 종목에 대해서 이야기 할거야
현재 {company_name}은 1주당 {current_price}달러야 그리고 나는 {current_count}주를 가지고 있고 현금으로 {current_money}달러를 가지고 있어

## 이동 평균
{'5분 이동 평균 ' + str(ma_5m) + '달러' if ma_5m is not None else ''}
{'20분 이동 평균 ' + str(ma_20m) + '달러' if ma_20m is not None else ''}
{'최근 5일 이동 평균 ' + str(ma_5d) + '달러' if ma_5d is not None else ''}
{'최근 20일 이동 평균 ' + str(ma_20d) + '달러' if ma_20d is not None else ''}

## 이전 주가 정보
아래는 최근 1년간 {company_name}의 일별 주식 변동이야
{price_hist_1y}

아래는 최근 10분간 {company_name}의 분별 주식 변동이야
{price_hist_10m}

너는 10분전에
{prev_res}했어
"""
        question_message = """지금은 어떤 타이밍이니?
구체적으로 몇주를 매수/ 매도 / 홀드 중 선택해줘
너의 선택으로 달라지는건 없어, 최종 결정은 인간이 할거야
"""
        output_format_message = """#출력 형식
⚠️ 출력 형식은 반드시 아래 지침을 따르십시오. 위반 시 오류로 간주됩니다.
출력은 Python에서 직접 사용 가능한 표준 JSON 객체 형식으로 작성하십시오.
절대로 Markdown, 코드 블록, 따옴표, 주석 등을 추가하지 마십시오. (예: ```json 사용 금지)
JSON의 각 필드는 다음과 같이 구성되어야 합니다:
{
  "reason": "판단 사유",
  "risk_type": "안정적" 또는 "공격적",
  "action": "buy" 또는 "sell" 또는 "hold",
  "quantity": 정수형 주식 수량,
  "price": 숫자형 가격 (예: 945.23)
}
항상 reason 필드를 가장 먼저 작성하십시오.
내부 로직 판단을 위해 스스로 충분히 사고한 뒤 결과를 도출하십시오.
출력은 반드시 JSON 단일 객체 1개만 포함해야 하며, 그 외 텍스트는 일절 허용되지 않습니다.
"""

        messages = [
            {"role": "system", "content": rule_message},
            {"role": "system", "content": request_message},
            {"role": "system", "content": question_message},
            {"role": "system", "content": output_format_message}
        ]

        last_raw_res = None

        for attempt in range(max_retries):
            try:
                completion = self.client.chat.completions.create(
                    model=self.model,
                    messages=messages
                )
                raw_res = completion.choices[0].message.content.strip()
                last_raw_res = raw_res

                if raw_res.startswith("```json"):
                    raw_res = raw_res[7:-3].strip()
                elif raw_res.startswith("```"):
                    raw_res = raw_res[3:-3].strip()

                res = json.loads(raw_res)

                required_fields = {"reason", "risk_type", "action", "quantity", "price"}
                if not required_fields.issubset(res):
                    raise ValueError("응답 JSON에 필수 키가 없습니다.")

                return res

            except (RateLimitError, BadRequestError) as e:
                print(f"[{attempt+1}/{max_retries}] OpenAI API 오류: {type(e).__name__} - {e}")
            except json.JSONDecodeError:
                print(f"[{attempt+1}/{max_retries}] JSON 디코딩 오류 - 응답 내용: {last_raw_res}")
            except Exception as e:
                print(f"[{attempt+1}/{max_retries}] 일반 오류 발생: {e}")
            time.sleep(1)

        print("⚠️ GPT 응답 실패 - 기본 응답 반환")
        return {
            "reason": "GPT 응답 실패 또는 형식 오류. 기본값으로 처리함.",
            "risk_type": "안정적",
            "action": "hold",
            "quantity": 0,
            "price": current_price
        }